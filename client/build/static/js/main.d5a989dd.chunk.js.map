{"version":3,"sources":["components/DashBoard.js","components/PetForm.js","components/PetEdit.js","components/PetDetail.js","App.js","serviceWorker.js","index.js"],"names":["DashBoard","props","componentDidMount","axios","get","then","res","setState","pets","data","sortThings","catch","err","console","log","state","setTimeout","arr","key","i","length","j","temp","bubbleSort","to","className","this","map","pet","_id","name","type","like","Component","PetForm","changeType","e","target","value","changeName","changeDesc","description","changeSkill1","skill1","changeSkill2","skill2","changeSkill3","skill3","create","preventDefault","post","errors","history","push","liked","onSubmit","onChange","message","PetEdit","match","params","update","put","PetDetail","addlike","delete","bind","disabled","onClick","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAqFeA,E,YAnEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAMVC,kBAAoB,WAChBC,IAAMC,IAAI,SACLC,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACC,KAAMF,EAAIG,KAAKD,OAAO,WACjC,EAAKE,mBAEVC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAdL,EAkBnBF,WAAa,WACT,IAAIF,EAAI,YAAO,EAAKO,MAAMP,MAC1BQ,YAAW,cACR,KACHR,EApCR,SAAoBS,EAAIC,GACpB,IAAI,IAAIC,EAAE,EAAGA,EAAEF,EAAIG,OAAO,EAAGD,IACzB,IAAI,IAAIE,EAAE,EAAGA,EAAEJ,EAAIG,OAAO,EAAED,EAAGE,IAC3B,GAAGJ,EAAII,GAAGH,GAAMD,EAAII,EAAE,GAAGH,GAAK,CAC1B,IAAII,EAAOL,EAAII,GACfJ,EAAII,GAAKJ,EAAII,EAAE,GACfJ,EAAII,EAAE,GAAKC,EAIvB,OAAOL,EA0BIM,CAAWf,EAAM,QACxB,EAAKD,SAAS,CAACC,KAAMA,KArBrB,EAAKO,MAAQ,CACTP,KAAM,IAHK,E,sEA0Bf,OACE,6BACE,kEACA,sCACA,kBAAC,IAAD,CAAMgB,GAAI,aAAV,4BACA,4BACA,yBAAKC,UAAU,WACX,2BAAOA,UAAU,QACb,+BACI,4BACI,oCACA,oCACA,qCACA,yCAGR,+BACKC,KAAKX,MAAMP,KAAKmB,KAAI,SAAAC,GAAG,OACpB,wBAAIV,IAAKU,EAAIC,KACb,4BAAKD,EAAIE,MACT,4BAAKF,EAAIG,MACT,4BAAKH,EAAII,MACT,4BACI,kBAAC,IAAD,CAAMR,GAAI,SAAWI,EAAIC,IAAM,WAC/B,4BAAQJ,UAAU,mBAAlB,YAEA,sCACA,kBAAC,IAAD,CAAMD,GAAI,SAAWI,EAAIC,IAAM,SAC/B,4BAAQJ,UAAU,gBAAlB,sB,GAvDRQ,a,OCwGTC,E,YApHX,WAAYjC,GAAQ,IAAD,8BACf,4CAAMA,KAeVkC,WAAa,SAACC,GACV,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBG,KAAMK,EAAEC,OAAOC,WAjBxC,EAmBnBC,WAAa,SAACH,GACV,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBE,KAAMM,EAAEC,OAAOC,WApBxC,EAsBnBE,WAAa,SAACJ,GACV,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBa,YAAaL,EAAEC,OAAOC,WAvB/C,EAyBnBI,aAAe,SAACN,GACZ,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBe,OAAQP,EAAEC,OAAOC,WA1B1C,EA4BnBM,aAAe,SAACR,GACZ,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBiB,OAAQT,EAAEC,OAAOC,WA7B1C,EA+BnBQ,aAAe,SAACV,GACZ,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBmB,OAAQX,EAAEC,OAAOC,WAhC1C,EAmCnBU,OAAO,SAACZ,GACJA,EAAEa,iBACF9C,IAAM+C,KAAK,QAAS,EAAKnC,MAAMa,KAC1BvB,MAAK,SAAAC,GACFO,QAAQC,IAAIR,GACTA,EAAIG,KAAK0C,OACR,EAAK5C,SAAS,CAAE4C,OAAO7C,EAAIG,KAAK0C,OAAOA,SAEvC,EAAKlD,MAAMmD,QAAQC,KAAK,QAE7B1C,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OA5CpB,EAAKG,MAAQ,CACTa,IAAK,CACDE,KAAM,GACNC,KAAM,GACNU,YAAa,GACbE,OAAQ,GACRE,OAAQ,GACRE,OAAQ,GACRf,KAAM,EACNsB,OAAO,GAEXH,OAAQ,IAbG,E,sEAmDf,OACI,6BACI,6DACJ,kCACI,qDACA,0BAAMI,SAAU7B,KAAKsB,QACjB,+CACA,2BAAOjB,KAAK,OAAOyB,SAAU9B,KAAKa,aAE7Bb,KAAKX,MAAMoC,OAAOrB,KACnB,uBAAGL,UAAU,SAASC,KAAKX,MAAMoC,OAAOrB,KAAK2B,SAC7C,4BAEJ,+CACA,2BAAO1B,KAAK,OAAOyB,SAAU9B,KAAKS,aAE7BT,KAAKX,MAAMoC,OAAOpB,KACnB,uBAAGN,UAAU,SAASC,KAAKX,MAAMoC,OAAOpB,KAAK0B,SAC7C,4BAEJ,+CACA,2BAAO1B,KAAK,OAAOyB,SAAU9B,KAAKc,aAE7Bd,KAAKX,MAAMoC,OAAOV,YACnB,uBAAGhB,UAAU,SAASC,KAAKX,MAAMoC,OAAOV,YAAYgB,SACpD,4BAEJ,4BACA,kCACA,qDAEI,+CACA,2BAAO1B,KAAK,OAAOyB,SAAU9B,KAAKgB,eAE7BhB,KAAKX,MAAMoC,OAAOR,OACnB,uBAAGlB,UAAU,SAASC,KAAKX,MAAMoC,OAAOR,OAAOc,SAC/C,4BAEJ,+CACA,2BAAO1B,KAAK,OAAOyB,SAAU9B,KAAKkB,eAE7BlB,KAAKX,MAAMoC,OAAON,OACnB,uBAAGpB,UAAU,SAASC,KAAKX,MAAMoC,OAAON,OAAOY,SAC/C,4BAEJ,+CACA,2BAAO1B,KAAK,OAAOyB,SAAU9B,KAAKoB,eAE7BpB,KAAKX,MAAMoC,OAAOJ,OACnB,uBAAGtB,UAAU,SAASC,KAAKX,MAAMoC,OAAOJ,OAAOU,SAC/C,6BAGZ,4BACI,4BAAQhC,UAAU,kBAAkBM,KAAK,UAAzC,WACA,sCACA,kBAAC,IAAD,CAAMP,GAAI,KAAK,4BAAQC,UAAU,gBAAlB,kB,GA5GbQ,aC+JPyB,E,YA9JX,WAAYzD,GAAQ,IAAD,8BACf,4CAAMA,KAeVC,kBAAoB,WAChBC,IAAMC,IAAN,gBAAmB,EAAKH,MAAM0D,MAAMC,OAAO/B,MACtCxB,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACqB,IAAKtB,EAAIG,KAAKmB,SAC9BjB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OArBL,EAyBnBuB,WAAa,SAACC,GACV,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBG,KAAMK,EAAEC,OAAOC,WA1BxC,EA6BnBC,WAAa,SAACH,GACV,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBE,KAAMM,EAAEC,OAAOC,WA9BxC,EAiCnBE,WAAa,SAACJ,GACV,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBa,YAAaL,EAAEC,OAAOC,WAlC/C,EAoCnBI,aAAe,SAACN,GACZ,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBe,OAAQP,EAAEC,OAAOC,WArC1C,EAuCnBM,aAAe,SAACR,GACZ,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBiB,OAAQT,EAAEC,OAAOC,WAxC1C,EA0CnBQ,aAAe,SAACV,GACZ,EAAK7B,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBmB,OAAQX,EAAEC,OAAOC,WA3C1C,EA8CnBuB,OAAS,SAACzB,GACNA,EAAEa,iBACF9C,IAAM2D,IAAN,gBAAmB,EAAK7D,MAAM0D,MAAMC,OAAO/B,KAAO,EAAKd,MAAMa,KACxDvB,MAAK,SAAAC,GACCA,EAAIG,KAAK0C,OACR,EAAK5C,SAAS,CAAC4C,OAAQ7C,EAAIG,KAAK0C,OAAOA,SAEvC,EAAKlD,MAAMmD,QAAQC,KAAnB,gBAAiC,EAAKpD,MAAM0D,MAAMC,OAAO/B,IAAzD,eAELlB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAtDpB,EAAKG,MAAQ,CACTa,IAAK,CACDE,KAAM,GACNC,KAAM,GACNU,YAAa,GACbE,OAAQ,GACRE,OAAQ,GACRE,OAAQ,GACRf,KAAM,EACNsB,OAAO,GAEXH,OAAQ,IAbG,E,sEA4Df,OACE,6BACE,8BAAU1B,UAAU,WAClB,iDACA,0BAAM8B,SAAU7B,KAAKmC,QACnB,yBAAKpC,UAAU,gBACf,+CACA,2BACEM,KAAK,OACLyB,SAAU9B,KAAKa,WACfD,MAAOZ,KAAKX,MAAMa,IAAIE,OAEvBJ,KAAKX,MAAMoC,OAAOrB,KACjB,uBAAGL,UAAU,SAASC,KAAKX,MAAMoC,OAAOrB,KAAK2B,SAE7C,4BAEF,+CACA,2BACE1B,KAAK,OACLyB,SAAU9B,KAAKS,WACfG,MAAOZ,KAAKX,MAAMa,IAAIG,OAEvBL,KAAKX,MAAMoC,OAAOpB,KACjB,uBAAGN,UAAU,SAASC,KAAKX,MAAMoC,OAAOpB,KAAK0B,SAE7C,4BAEF,+CACA,2BACE1B,KAAK,OACLyB,SAAU9B,KAAKc,WACfF,MAAOZ,KAAKX,MAAMa,IAAIa,cAEvBf,KAAKX,MAAMoC,OAAOV,YACjB,uBAAGhB,UAAU,SACVC,KAAKX,MAAMoC,OAAOV,YAAYgB,SAGjC,4BAEF,6BAEA,yBAAKhC,UAAU,gBACf,8BAAUA,UAAU,YAClB,qDAEA,+CACA,2BACEM,KAAK,OACLyB,SAAU9B,KAAKgB,aACfJ,MAAOZ,KAAKX,MAAMa,IAAIe,SAEvBjB,KAAKX,MAAMoC,OAAOR,OACjB,uBAAGlB,UAAU,SAASC,KAAKX,MAAMoC,OAAOR,OAAOc,SAE/C,4BAEF,+CACA,2BACE1B,KAAK,OACLyB,SAAU9B,KAAKkB,aACfN,MAAOZ,KAAKX,MAAMa,IAAIiB,SAEvBnB,KAAKX,MAAMoC,OAAON,OACjB,uBAAGpB,UAAU,SAASC,KAAKX,MAAMoC,OAAON,OAAOY,SAE/C,4BAEF,gDACA,2BACE1B,KAAK,OACLyB,SAAU9B,KAAKoB,aACfR,MAAOZ,KAAKX,MAAMa,IAAImB,SAEvBrB,KAAKX,MAAMoC,OAAOJ,OACjB,uBAAGtB,UAAU,SAASC,KAAKX,MAAMoC,OAAOJ,OAAOU,SAE/C,8BAIJ,sCAAW,8BAAO/B,KAAKX,MAAMa,IAAII,OACjC,4BACA,4BAAQP,UAAU,kBAAkBM,KAAK,UAAzC,YAGA,sCACA,kBAAC,IAAD,CAAMP,GAAE,gBAAWE,KAAKzB,MAAM0D,MAAMC,OAAO/B,IAAnC,YACN,4BAAQJ,UAAU,gBAAlB,kB,GAtJIQ,a,QC2EP8B,E,YA1EX,WAAY9D,GAAQ,IAAD,8BACf,4CAAMA,KAiBVC,kBAAoB,WAChBC,IAAMC,IAAN,gBAAmB,EAAKH,MAAM0D,MAAMC,OAAO/B,MACtCxB,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACqB,IAAKtB,EAAIG,KAAKmB,SAC9BjB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAvBL,EA0BnBoD,QAAU,SAAC5B,GACP,IAAIJ,EAAO,EAAKjB,MAAMa,IAAII,KAAO,EACjC,EAAKjB,MAAMa,IAAII,OACf,EAAKjB,MAAMa,IAAI0B,OAAQ,EACvB,EAAK/C,SAAS,CAACqB,IAAI,eAAK,EAAKb,MAAMa,IAAjB,CAAsBI,KAAMA,EAAMsB,OAAO,MAC3DnD,IAAM2D,IAAN,gBAAmB,EAAK7D,MAAM0D,MAAMC,OAAO/B,KAAO,EAAKd,MAAMa,KACxDvB,MAAK,SAAAC,GACF,EAAKJ,uBACNS,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAnCL,EAsCnBqD,OAAS,SAAC7B,GACNjC,IAAM8D,OAAN,gBAAsB,EAAKhE,MAAM0D,MAAMC,OAAO/B,MACzCxB,MAAK,SAAAC,GACF,EAAKL,MAAMmD,QAAQC,KAAK,QACzB1C,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAzCpB,EAAKG,MAAQ,CACTa,IAAK,CACDE,KAAM,GACNC,KAAM,GACNU,YAAa,GACbE,OAAQ,GACRE,OAAQ,GACRE,OAAQ,GACRf,KAAM,EACNsB,OAAO,GAGXH,OAAQ,IAEZ,EAAKa,QAAU,EAAKA,QAAQE,KAAb,gBAhBA,E,sEAgDf,OACI,6BACI,kBAAC,IAAD,CAAM1C,GAAI,KAAK,4BAAQC,UAAU,gBAAlB,SACf,8BAAUA,UAAU,WAChB,gCAAQ,8CAAmB,8BAAOC,KAAKX,MAAMa,IAAIE,QACjD,yBAAKL,UAAU,gBACX,4CAAmB,8BAAOC,KAAKX,MAAMa,IAAIG,OACzC,4CAAiB,8BAAOL,KAAKX,MAAMa,IAAIa,eAE3C,yBAAKhB,UAAU,gBACX,8BAAUA,UAAU,YAChB,gCAAQ,wCACR,2BAAIC,KAAKX,MAAMa,IAAIe,QACnB,2BAAIjB,KAAKX,MAAMa,IAAIiB,QACnB,2BAAInB,KAAKX,MAAMa,IAAImB,UAG3B,sCAAW,8BAAOrB,KAAKX,MAAMa,IAAII,OACjC,4BAAQP,UAAU,eAAe0C,SAAUzC,KAAKX,MAAMa,IAAI0B,MAAOc,QAAS1C,KAAKsC,QAAQE,KAAKxC,KAAKA,KAAKX,MAAMa,MAA5G,iBACA,4BAAQH,UAAU,eAAe2C,QAAS1C,KAAKuC,QAA/C,yB,GApEIhC,aCqBToC,E,iLAdX,OACE,yBAAK5C,UAAU,OACb,4CACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,IAAIC,UAAWxE,IACjC,kBAAC,IAAD,CAAOuE,KAAK,YAAYC,UAAWtC,IACnC,kBAAC,IAAD,CAAOqC,KAAK,kBAAkBC,UAAWd,IACzC,kBAAC,IAAD,CAAOa,KAAK,oBAAoBC,UAAWT,U,GATnC9B,aCGEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,MAAK,SAAA+E,GACjCA,EAAaC,kB","file":"static/js/main.d5a989dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nfunction bubbleSort(arr,key){\n    for(let i=0; i<arr.length-1; i++){\n        for(let j=0; j<arr.length-1-i; j++){\n            if(arr[j][key]> arr[j+1][key]){\n                let temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\nclass DashBoard extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            pets: []\n        }\n    }\n\n    componentDidMount = () => {\n        axios.get(\"/pets\")\n            .then(res => {\n                this.setState({pets: res.data.pets}, () => {\n                    this.sortThings();\n                });\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n\n    sortThings = () => {\n        let pets = [...this.state.pets];\n        setTimeout(() => { \n        }, 1000)\n        pets = bubbleSort(pets, \"type\");\n        this.setState({pets: pets});\n    }\n    render() {\n        return (\n          <div>\n            <h3>These pets are looking for a home!</h3>\n            <span>&nbsp;</span>\n            <Link to={\"/pets/new\"}>Add a pet to the shelter</Link>\n            <p></p>\n            <div className=\"mytable\">\n                <table className=\"pets\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Likes</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.pets.map(pet => (\n                            <tr key={pet._id}>\n                            <td>{pet.name}</td>\n                            <td>{pet.type}</td>\n                            <td>{pet.like}</td>\n                            <td>\n                                <Link to={\"/pets/\" + pet._id + \"/detail\"}>\n                                <button className=\"mybuttondetails\">Details</button>\n                                </Link>\n                                <span>&nbsp;</span>\n                                <Link to={\"/pets/\" + pet._id + \"/edit\"}>\n                                <button className=\"mybuttonedit\">Edit</button>\n                                </Link>\n                            </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default DashBoard;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass PetForm extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            pet: {\n                name: \"\",\n                type: \"\",\n                description: \"\",\n                skill1: \"\",\n                skill2: \"\",\n                skill3: \"\",\n                like: 0,\n                liked: false\n            },\n            errors: {}\n        }\n    }\n    changeType = (e) => {\n        this.setState({pet: {...this.state.pet, type: e.target.value}});\n    }\n    changeName = (e) => {\n        this.setState({pet: {...this.state.pet, name: e.target.value}});\n    }\n    changeDesc = (e) => {\n        this.setState({pet: {...this.state.pet, description: e.target.value}});\n    }\n    changeSkill1 = (e) => {\n        this.setState({pet: {...this.state.pet, skill1: e.target.value}});\n    }\n    changeSkill2 = (e) => {\n        this.setState({pet: {...this.state.pet, skill2: e.target.value}});\n    }\n    changeSkill3 = (e) => {\n        this.setState({pet: {...this.state.pet, skill3: e.target.value}});\n    }\n\n    create=(e) => {\n        e.preventDefault();\n        axios.post(\"/pets\", this.state.pet)\n            .then(res => {\n                console.log(res);\n                if(res.data.errors){\n                    this.setState({ errors:res.data.errors.errors });\n                }else{\n                    this.props.history.push(\"/\");\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n    \n    render() {\n        return (\n            <div>\n                <h3>Know of a pet needing a home?</h3>\n            <fieldset>\n                <legend>Enter Pet Details</legend>\n                <form onSubmit={this.create}>\n                    <label >Pet&nbsp;Name:</label>\n                    <input type=\"text\" onChange={this.changeName}></input>\n                    {\n                        (this.state.errors.name) ?\n                        <p className=\"error\">{this.state.errors.name.message}</p> :\n                        <p></p>\n                    }\n                    <label >Pet&nbsp;Type:</label>\n                    <input type=\"text\" onChange={this.changeType}></input>\n                    {\n                        (this.state.errors.type) ?\n                        <p className=\"error\">{this.state.errors.type.message}</p> :\n                        <p></p>\n                    }\n                    <label>Description:</label>\n                    <input type=\"text\" onChange={this.changeDesc}></input>\n                    {\n                        (this.state.errors.description) ?\n                        <p className=\"error\">{this.state.errors.description.message}</p> :\n                        <p></p>\n                    }\n                    <p></p>\n                    <fieldset>\n                    <legend>Skills (optional)</legend>\n                    \n                        <label >Skill&nbsp;#1:</label>\n                        <input type=\"text\" onChange={this.changeSkill1}></input>\n                        {\n                            (this.state.errors.skill1) ?\n                            <p className=\"error\">{this.state.errors.skill1.message}</p> :\n                            <p></p>\n                        }\n                        <label >Skill&nbsp;#2:</label>\n                        <input type=\"text\" onChange={this.changeSkill2}></input>\n                        {\n                            (this.state.errors.skill2) ?\n                            <p className=\"error\">{this.state.errors.skill2.message}</p> :\n                            <p></p>\n                        }\n                        <label>Skill&nbsp;#3:</label>\n                        <input type=\"text\" onChange={this.changeSkill3}></input>\n                        {\n                            (this.state.errors.skill3) ?\n                            <p className=\"error\">{this.state.errors.skill3.message}</p> :\n                            <p></p>\n                        }\n                </fieldset>\n                <p></p>\n                    <button className=\"mybuttondetails\" type=\"submit\">Add Pet</button>\n                    <span>&nbsp;</span>\n                    <Link to={\"/\"}><button className=\"mybuttonedit\">Cancel</button></Link>\n                </form>\n                \n            </fieldset>\n        </div>\n        );\n    }\n}\n\nexport default PetForm;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass PetEdit extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            pet: {\n                name: \"\",\n                type: \"\",\n                description: \"\",\n                skill1: \"\",\n                skill2: \"\",\n                skill3: \"\",\n                like: 0,\n                liked: false\n            },\n            errors: {}\n        }\n    }\n    componentDidMount = () => {\n        axios.get(`/pets/${this.props.match.params._id}`)\n            .then(res => {\n                this.setState({pet: res.data.pet});\n            }).catch(err => {\n                console.log(err);\n            })\n    }\n\n    changeType = (e) => {\n        this.setState({pet: {...this.state.pet, type: e.target.value}});\n    }\n\n    changeName = (e) => {\n        this.setState({pet: {...this.state.pet, name: e.target.value}});\n    }\n\n    changeDesc = (e) => {\n        this.setState({pet: {...this.state.pet, description: e.target.value}});\n    }\n    changeSkill1 = (e) => {\n        this.setState({pet: {...this.state.pet, skill1: e.target.value}});\n    }\n    changeSkill2 = (e) => {\n        this.setState({pet: {...this.state.pet, skill2: e.target.value}});\n    }\n    changeSkill3 = (e) => {\n        this.setState({pet: {...this.state.pet, skill3: e.target.value}});\n    }\n\n    update = (e) => {\n        e.preventDefault();\n        axios.put(`/pets/${this.props.match.params._id}`, this.state.pet)\n            .then(res => {\n                if(res.data.errors){\n                    this.setState({errors: res.data.errors.errors});\n                } else {\n                    this.props.history.push(`/pets/${this.props.match.params._id}/detail`);\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n    render() {\n        return (\n          <div>\n            <fieldset className=\"mainset\">\n              <legend>Edit this Pet</legend>\n              <form onSubmit={this.update}>\n                <div className=\"detailheader\">\n                <label>Pet&nbsp;Name:</label>\n                <input\n                  type=\"text\"\n                  onChange={this.changeName}\n                  value={this.state.pet.name}\n                ></input>\n                {this.state.errors.name ? (\n                  <p className=\"error\">{this.state.errors.name.message}</p>\n                ) : (\n                  <p></p>\n                )}\n                <label>Pet&nbsp;Type:</label>\n                <input\n                  type=\"text\"\n                  onChange={this.changeType}\n                  value={this.state.pet.type}\n                ></input>\n                {this.state.errors.type ? (\n                  <p className=\"error\">{this.state.errors.type.message}</p>\n                ) : (\n                  <p></p>\n                )}\n                <label>Description:</label>\n                <input\n                  type=\"text\"\n                  onChange={this.changeDesc}\n                  value={this.state.pet.description}\n                ></input>\n                {this.state.errors.description ? (\n                  <p className=\"error\">\n                    {this.state.errors.description.message}\n                  </p>\n                ) : (\n                  <p></p>\n                )}\n                <p></p>\n                </div>\n                <div className=\"skillsdetail\">\n                <fieldset className=\"innerset\">\n                  <legend>Skills (optional)</legend>\n\n                  <label>Skill&nbsp;#1:</label>\n                  <input\n                    type=\"text\"\n                    onChange={this.changeSkill1}\n                    value={this.state.pet.skill1}\n                  ></input>\n                  {this.state.errors.skill1 ? (\n                    <p className=\"error\">{this.state.errors.skill1.message}</p>\n                  ) : (\n                    <p></p>\n                  )}\n                  <label>Skill&nbsp;#2:</label>\n                  <input\n                    type=\"text\"\n                    onChange={this.changeSkill2}\n                    value={this.state.pet.skill2}\n                  ></input>\n                  {this.state.errors.skill2 ? (\n                    <p className=\"error\">{this.state.errors.skill2.message}</p>\n                  ) : (\n                    <p></p>\n                  )}\n                  <label>Skill&nbsp;#3::</label>\n                  <input\n                    type=\"text\"\n                    onChange={this.changeSkill3}\n                    value={this.state.pet.skill3}\n                  ></input>\n                  {this.state.errors.skill3 ? (\n                    <p className=\"error\">{this.state.errors.skill3.message}</p>\n                  ) : (\n                    <p></p>\n                  )}\n                </fieldset>\n                </div>\n                <h3>Likes: <span>{this.state.pet.like}</span></h3>\n                <p></p>\n                <button className=\"mybuttondetails\" type=\"submit\">\n                  Edit Pet\n                </button>\n                <span>&nbsp;</span>\n                <Link to={`/pets/${this.props.match.params._id}/detail`}>\n                  <button className=\"mybuttonedit\">Cancel</button>\n                </Link>\n              </form>\n            </fieldset>\n          </div>\n        );\n    }\n}\n\nexport default PetEdit;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass PetDetail extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            pet: {\n                name: \"\",\n                type: \"\",\n                description: \"\",\n                skill1: \"\",\n                skill2: \"\",\n                skill3: \"\",\n                like: 0,\n                liked: false\n\n            },\n            errors: {}\n        };\n        this.addlike = this.addlike.bind(this);\n    }\n    componentDidMount = () => {\n        axios.get(`/pets/${this.props.match.params._id}`)\n            .then(res => {\n                this.setState({pet: res.data.pet});\n            }).catch(err => {\n                console.log(err);\n            })\n    }\n    addlike = (e) => {\n        let like = this.state.pet.like + 1;\n        this.state.pet.like ++;\n        this.state.pet.liked = true;\n        this.setState({pet: {...this.state.pet, like: like, liked: true}});\n        axios.put(`/pets/${this.props.match.params._id}`, this.state.pet)\n            .then(res => {\n                this.componentDidMount();\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n    delete = (e) => {\n        axios.delete(`/pets/${this.props.match.params._id}`)\n            .then(res => {\n                this.props.history.push('/');\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n    \n    render() {\n        return (\n            <div>\n                <Link to={\"/\"}><button className=\"mybuttonedit\">Home</button></Link>\n                <fieldset className=\"mainset\">\n                    <legend><h3>Details about: <span>{this.state.pet.name}</span></h3></legend>\n                    <div className=\"detailheader\">\n                        <h3>Pet&nbsp;Type: <span>{this.state.pet.type}</span></h3>\n                        <h3>Description: <span>{this.state.pet.description}</span></h3>\n                    </div>\n                    <div className=\"skillsdetail\">\n                        <fieldset className=\"innerset\">\n                            <legend><h3>Skills:</h3></legend>\n                            <p>{this.state.pet.skill1}</p>\n                            <p>{this.state.pet.skill2}</p>\n                            <p>{this.state.pet.skill3}</p>\n                        </fieldset>\n                    </div>\n                    <h3>Likes: <span>{this.state.pet.like}</span></h3>\n                    <button className=\"mybuttonedit\" disabled={this.state.pet.liked} onClick={this.addlike.bind(this,this.state.pet)}>Like this pet</button>\n                    <button className=\"mybuttonedit\" onClick={this.delete}>Adopt this pet!</button>\n                </fieldset>\n            </div>\n        );\n    }\n}\n\nexport default PetDetail;","import React, { Component } from 'react';\nimport './App.css';\nimport \"react-router\";\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport DashBoard from './components/DashBoard';\nimport PetForm from './components/PetForm';\nimport PetEdit from './components/PetEdit';\nimport PetDetail from './components/PetDetail';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pet Shelter:</h1>\n        <BrowserRouter>\n          <Route exact path=\"/\" component={DashBoard} />\n          <Route path=\"/pets/new\" component={PetForm} />\n          <Route path=\"/pets/:_id/edit\" component={PetEdit} />\n          <Route path=\"/pets/:_id/detail\" component={PetDetail} />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}